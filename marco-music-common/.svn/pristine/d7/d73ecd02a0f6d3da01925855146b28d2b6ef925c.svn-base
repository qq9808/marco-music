package com.marco.music.common.fatherDAO;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;

import org.apache.log4j.Logger;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * @author Marco
 * @date 2017年5月21日 下午9:55:18
 * DAO.
 */
@SuppressWarnings("all")
public abstract class FatherDAO {

	@Autowired
	private SessionFactory sessionFactory;
	
	protected abstract Class<?> getModelClass();
	
	protected Logger logger = Logger.getLogger(getClass());
	
	protected Session getSession() {
		return sessionFactory.getCurrentSession();
	}
	
	/**
	 * save
	 */
	public void save(Object obj) {
		getSession().save(obj);
	}
	
	/**
	 * get
	 */
	public <T> T get(Class<T> clazz, int id) {
		return (T) getSession().get(clazz, id);
	}
	
	public <T> T get(Class<T> clazz, String id) {
		return (T) getSession().get(clazz, id);
	}
	
	public <T> T get(Class<T> clazz, Serializable id) {
		return (T) getSession().get(clazz, id);
	}
	
	/**
	 * delete
	 */
	public void deleteById(Class<?> clazz, int id) {
		getSession().delete(get(clazz, id));
	}
	
	public void deleteById(Class<?> clazz, String id) {
		getSession().delete(get(clazz, id));
	}
	
	public void deleteById(Class<?> clazz, Serializable id) {
		getSession().delete(get(clazz, id));
	}
	
	/**
	 * update
	 */
	public void update(Object obj) {
		getSession().update(obj);
	}
	
	/**
	 * 执行HQL查询
	 * 
	 * @param hql 语句
	 * @param values hql语句参数值
	 * @return 结果集
	 */
	protected <T> List<T> findByHQL(final String hql, final List<?> values) {
		Query queryObject = getSession().createQuery(hql);
		if(values != null) {
			for (int i = 0; i < values.size(); i++) {
				queryObject.setParameter(i, values.get(i));
			}
		}
		return queryObject.list();
	}
	
	/**
	 * 执行HQL查询
	 * 
	 * @param hql 查询语句
	 * @return
	 */
	protected <T> List<T> findByHQL(String hql) {
		return findByHQL(hql, null);
	}
	
	/**
	 * 使用sql 语句进行分页查询操作
	 * 
	 * @param sql : sql查询语句
	 * @param values : 查询参数值 集合
	 * @return List
	 */
	protected <T> List<T> findListBySqlForPage(final String sql, final List<?> values, final Integer firstRow, final Integer maxResults) {		
		Query query = getSession().createSQLQuery(sql);
		if(values != null && values.size() > 0) {
			for(int i = 0; i < values.size(); i++) {
				query.setParameter(i, values.get(i));
			}
		}
		if(firstRow != null) {
			query.setFirstResult(firstRow);
		}
		if(maxResults != null) {
			query.setMaxResults(maxResults);
		}
		return query.list();
	}
	
	/**
	 * 使用sql 语句进行操作
	 * 
	 * @param sql : sql查询语句
	 * @param values : 查询参数值 集合
	 * @return List
	 */
	protected <T> List<T> findListBySql(final String sql, final List<?> values) {
		return findListBySqlForPage(sql, values, null, null);
	}
	
	/**
	 * 使用sql语句进行统计操作
	 * 
	 * @param sql    统计总数的sql语句
	 * @param values sql语句参数值集合
	 * @return List
	 */
	protected int countBySQL(final String sql, final List<?> values) {
		List<Object> result = findListBySql(sql, values);
		if (result.isEmpty()) {
			return 0;
		}
		Object total = result.get(0);
		if(total instanceof Integer) {
			return (Integer) total;
		}
		if(total instanceof Long) {
			return ((Long) total).intValue();
		}
		if(total instanceof BigDecimal) {
			return ((BigDecimal) total).intValue();
		}
		if(total instanceof BigInteger) {
			return ((BigInteger) total).intValue();
		}
		return 0;
	}
	
	/**
	 * HQL语句执行分页查询操作 <br>
	 * 此方法提供将结果集封装成值对象：Class resultTransforme
	 * 
	 * @param hql HQL查询语句
	 * @param values 语句参数值
	 * @param firstRow 起始行
	 * @param fetchSize 数据集大小
	 * @param resultTransforme 结果集封装对象class <br>
	 *            如果 resultTransforme 为空，将返回HQL查询的domain数据对象
	 * 
	 * @return 结果集
	 */
	protected <T> List<T> findListForPage(final String hql, final List<?> values, final Integer firstRow, final Integer fetchSize, final Class<T> resultTransforme) {
		Query query = getSession().createQuery(hql);
		if(resultTransforme != null) {
			query.setResultTransformer(Transformers.aliasToBean(resultTransforme));
		}
		if(values != null && values.size() > 0) {
			for (int i = 0; i < values.size(); i++) {
				query.setParameter(i, values.get(i));
			}
		}
		if(firstRow != null) {
			query.setFirstResult(firstRow);
		}
		if(fetchSize != null) {
			query.setMaxResults(fetchSize);
		}
		return query.list();
	}
	
	/**
	 * HQL语句执行分页查询操作 <br>
	 * 
	 * @param hql HQL查询语句
	 * @param values 语句参数值
	 * @param firstRow 起始行
	 * @param fetchSize 数据集大小
	 * @return 结果集
	 */
	public <T> List<T> findListForPage(final String hql, final List<?> values, final Integer firstRow, final Integer fetchSize) {
		return this.findListForPage(hql, values, firstRow, fetchSize, null);
	}
	
	/**
	 * 根据对象属性查询符合条件的记录总数<br>
	 * 查询规则：int型数据按 等于 条件查找，String类型按 like 条件查询
	 * 
	 * @param example 查询对象
	 * @return 记录数
	 */
	public int count(final Object example) {
		Criteria criteria = getSession().createCriteria(getModelClass());
		if(example != null) {
			criteria.add(Example.create(example).enableLike(MatchMode.ANYWHERE));
		}
		Long count = (Long) criteria.setProjection(Projections.count("id")).uniqueResult();
		if(count != null && count.intValue() > 0) {
			return count.intValue();
		}
		return 0;
	}
	
	/**
	 * 根据对象属性查询数据集<br>
	 * 查询规则：int型数据按 等于 条件查找，String类型按 like 条件查询<br>
	 * 
	 * @param example 查询对象
	 * @param orders 排序设定 如果此参数为空，默认按照id升序排序
	 * @param startRow 起始行号
	 * @param maxRow 最大结果集
	 * @return 查询数据集
	 */
	public <T> List<T> serach(final Object example, final List<Order> orders, final Integer startRow, final Integer maxRow) {
		Criteria criteria = getSession().createCriteria(getModelClass());
		if(example != null) {
			criteria.add(Example.create(example).enableLike(MatchMode.ANYWHERE));
		}		
		if(startRow != null && maxRow != null) {
			criteria.setFirstResult(startRow);
			criteria.setMaxResults(maxRow);
		}
		if(orders == null || orders.size() < 1) {
			criteria.addOrder(Order.asc("id"));
		} else {
			for(Order order : orders) {
				criteria.addOrder(order);
			}
		}
		return criteria.list();
	}
	
}
