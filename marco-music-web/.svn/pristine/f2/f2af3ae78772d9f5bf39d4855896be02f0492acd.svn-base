package com.marco.music.controller.singing;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.marco.music.common.code.CodeAndMsg;
import com.marco.music.common.keyword.Keyword;
import com.marco.music.common.page.Page;
import com.marco.music.common.string.StringTool;
import com.marco.music.common.tencent.Signature;
import com.marco.music.common.tencent.Tencent;
import com.marco.music.model.notice.Notice;
import com.marco.music.model.singing.Singing;
import com.marco.music.model.singing.SingingReply;
import com.marco.music.model.user.User;
import com.marco.music.service.notice.NoticeService;
import com.marco.music.service.singing.SingingReplyService;
import com.marco.music.service.singing.SingingService;

import net.sf.json.JSONObject;

/**
 * @author Marco
 * @date 2017年6月3日 上午1:43:23
 * 原创&翻唱Controller.
 */
@Controller
public class SingingController {

	protected Logger logger = Logger.getLogger(getClass());
	
	@Autowired
	private SingingService singingService;
	
	@Autowired
	private SingingReplyService singingReplyService;
	
	@Autowired
	private NoticeService noticeService;
	
	/**
	 * 原创&翻唱页面
	 */
	@RequestMapping("/singing/page")
	public String singingPage(HttpServletRequest request, HttpServletResponse response,
			Integer curPage) {
		
		try {
			
			Page page = new Page();
			
			if(curPage != null) {
				page.setCurPage(curPage);
			}
			page.setFetchSize(20);
			
			Singing singing = new Singing();
			int count = singingService.countSingingByCondition(singing);
			page.setAllRecordNum(count);
			page.setTotalPage(page.getTotalPage());
			Integer startRow = page.getStartRow();
			
			List<Object[]> list = singingService.searchSingingBySQL(startRow, page.getFetchSize());			
			request.setAttribute("page", page);
			request.setAttribute("list", list);	
			request.setAttribute("txURL", Keyword.TX_URL);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("打开原创&翻唱模块出错", e.fillInStackTrace());
		}
		
		return "/singing/singing";
	}
	
	/**
	 * 上传页面
	 */
	@RequestMapping("/singing/writing")
	public String singingWriting(Integer type, HttpServletRequest request, HttpServletResponse response) {
		
		if(type != null && type == Keyword.VIDEO_TYPE) {
			return "/singing/singing_writing_video";
		}
		
		return "/singing/singing_writing_audio";
	}
	
	/**
	 * 获得腾讯视频云签名
	 */
	@RequestMapping(value="/singing/signature", produces="application/json; charset=utf-8")
	@ResponseBody
	public String getSignature(HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			Signature sign = new Signature();
			
			sign.m_strSecId = Tencent.secret_id;
			sign.m_strSecKey = Tencent.secret_key;
			sign.m_qwNowTime = System.currentTimeMillis() / 1000;
			sign.m_iRandom = new Random().nextInt(java.lang.Integer.MAX_VALUE);
			sign.m_iSignValidDuration = 3600 * 24 * 2;
			
			result.put("state", CodeAndMsg.SUCCESS_CODE);
			result.put("msg", CodeAndMsg.SUCCESS_MSG);
			result.put("signature", sign.GetUploadSignature());
		} catch (Exception e) {		
			e.printStackTrace();
			logger.error("获取签名出错", e.fillInStackTrace());
			result.put("state", CodeAndMsg.EXCEPTION_CODE);
			result.put("msg", CodeAndMsg.EXCEPTION_MSG);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(result);
		return jsonObject.toString();
	}
	
	/**
	 * 保存帖子
	 */
	@RequestMapping(value="/singing/save", produces="application/json; charset=utf-8")
	@ResponseBody
	public String singingSave(HttpServletRequest request, HttpServletResponse response,
			String title, String content, Integer type, String videoID, String videoURL, String videoName) {
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			Object UserObj = request.getSession().getAttribute(Keyword.USER);
			
			if(UserObj == null) {
				result.put("state", CodeAndMsg.USER_NOT_EXIST);
				result.put("msg", CodeAndMsg.USER_NOT_EXIST_MSG);
				JSONObject jsonObject = JSONObject.fromObject(result);
				return jsonObject.toString();
			}
			//这些参数不能为空
			if(StringTool.isEmpty(title) || StringTool.isEmpty(content) || type == null
					|| StringTool.isEmpty(videoID)) {
				result.put("state", CodeAndMsg.PARAM_ERROR_CODE);
				result.put("msg", CodeAndMsg.PARAM_ERROR_MSG);
				JSONObject jsonObject = JSONObject.fromObject(result);
				return jsonObject.toString();
			}
			if(type == 2) {  //如果是音频上传，videoURL不能为空
				if(StringTool.isEmpty(videoURL)) {
					result.put("state", CodeAndMsg.PARAM_ERROR_CODE);
					result.put("msg", CodeAndMsg.PARAM_ERROR_MSG);
					JSONObject jsonObject = JSONObject.fromObject(result);
					return jsonObject.toString();
				}
			}
			
			User user = (User)UserObj;
			Singing singing = new Singing();
			
			singing.setTitle(title);
			singing.setContent(content);
			singing.setUserID(user.getId());
			singing.setCreateTime(new Date());
			singing.setType(type);
			singing.setVideoID(videoID);
			singing.setVideoURL(videoURL);
			singing.setVideoName(videoName);
			
			singingService.save(singing);
			result.put("state", CodeAndMsg.SUCCESS_CODE);
			result.put("msg", CodeAndMsg.SUCCESS_MSG);
		} catch (Exception e) {
			logger.error("保存原创&翻唱帖子出错", e.fillInStackTrace());
			result.put("state", CodeAndMsg.EXCEPTION_CODE);
			result.put("msg", CodeAndMsg.EXCEPTION_MSG);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(result);
		return jsonObject.toString();
	}
	
	/**
	 * 帖子详情
	 */
	@RequestMapping("/singing/detail")
	public String singingDetail(HttpServletRequest request, HttpServletResponse response,
			Integer id, Integer curPage) {
		
		String path = "";
		
		try {
			
			Object[] singing = singingService.getSinging(id);
						
			if(singing[10].toString().equals(Keyword.AUDIO_TYPE.toString())) {
				path = "/singing/singing_audio_detail";
			}
			else {
				path = "/singing/singing_video_detail";
			}
			
			//查找该帖子下面的回复
			Page page = new Page();			
			if(curPage != null) {
				page.setCurPage(curPage);
			}
			page.setFetchSize(99999);
			
			SingingReply singingReply = new SingingReply();
			int count = singingReplyService.countSingingReplyByCondition(singingReply);
			page.setAllRecordNum(count);
			page.setTotalPage(page.getTotalPage());
			Integer startRow = page.getStartRow();
			
			List<Object[]> list = singingReplyService.findSingingReplyBySQL(id, startRow, page.getFetchSize());
			
			request.setAttribute("singing", singing);
			request.setAttribute("list", list);
			//request.setAttribute("txURL", Keyword.TX_URL);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("打开原创&翻唱帖子出错", e.fillInStackTrace());
		}

		return path;
	}
	
	/**
	 * 保存回复
	 */
	@RequestMapping(value="/singing/reply/save", produces="application/json; charset=utf-8")
	@ResponseBody
	public String singingReplySave(HttpServletRequest request, HttpServletResponse response,
			Integer singingID, String content, Integer level, Integer replyID, Integer authorID, String eventName) {
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			Object UserObj = request.getSession().getAttribute(Keyword.USER);
			
			if(UserObj == null) {
				result.put("state", CodeAndMsg.USER_NOT_EXIST);
				result.put("msg", CodeAndMsg.USER_NOT_EXIST_MSG);
				JSONObject jsonObject = JSONObject.fromObject(result);
				return jsonObject.toString();
			}
			
			User user = (User)UserObj;
			SingingReply singingReply = new SingingReply();
			
			singingReply.setSingingID(singingID);
			singingReply.setContent(content);
			singingReply.setLevel(level);
			if(level != null && level == 2) {
				singingReply.setReplyID(replyID);
			}
			singingReply.setUserID(user.getId());
			singingReply.setCreateTime(new Date());
			
			singingReplyService.save(singingReply);
			result.put("state", CodeAndMsg.SUCCESS_CODE);
			result.put("msg", CodeAndMsg.SUCCESS_MSG);
			
			try {
				Notice notice = new Notice();
				if(level != null && level == 1) {
					notice.setType(Keyword.NOTICE_TYPE_SINGING);
				}
				if(level != null && level == 2) {
					notice.setType(Keyword.NOTICE_TYPE_SINGING_REPLY);
				}
				notice.setUserID(authorID);
				notice.setPersonID(user.getId());
				notice.setEventID(singingID);
				notice.setEventName(eventName);
				notice.setCreateTime(new Date());
				notice.setKnow(Keyword.NOT_READ);	
				noticeService.save(notice);
			} catch (Exception e) {
				e.printStackTrace();
				logger.error("保存原创&翻唱动态提醒出错", e.fillInStackTrace());
			}
		} catch (Exception e) {
			logger.error("保存原创&翻唱回复出错", e.fillInStackTrace());
			result.put("state", CodeAndMsg.EXCEPTION_CODE);
			result.put("msg", CodeAndMsg.EXCEPTION_MSG);
		}
		
		JSONObject jsonObject = JSONObject.fromObject(result);
		return jsonObject.toString();
	}
	
}
